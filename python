from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
from werkzeug.security import generate_password_hash, check_password_hash
from flask_jwt_extended import JWTManager, create_access_token, jwt_required

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///vehicules.db'
app.config['JWT_SECRET_KEY'] = 'secret'
db = SQLAlchemy(app)
ma = Marshmallow(app)
jwt = JWTManager(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)

class Vehicule(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    immatriculation = db.Column(db.String(50), unique=True, nullable=False)
    proprietaire = db.Column(db.String(100), nullable=False)
    type = db.Column(db.String(50), nullable=False)
    amendes = db.Column(db.String(100), nullable=True)

class VehiculeSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = Vehicule

vehicule_schema = VehiculeSchema()
vehicules_schema = VehiculeSchema(many=True)

@app.route('/login', methods=['POST'])
def login():
    username = request.json['username']
    password = request.json['password']
    user = User.query.filter_by(username=username).first()
    if user and check_password_hash(user.password, password):
        token = create_access_token(identity=user.id)
        return jsonify({'token': token}), 200
    return jsonify({'message': 'Invalid credentials'}), 401

@app.route('/vehicules', methods=['POST'])
@jwt_required()
def add_vehicule():
    immatriculation = request.json['immatriculation']
    proprietaire = request.json['proprietaire']
    type = request.json['type']
    amendes = request.json.get('amendes')
    new_vehicule = Vehicule(immatriculation=immatriculation, proprietaire=proprietaire, type=type, amendes=amendes)
    db.session.add(new_vehicule)
    db.session.commit()
    return vehicule_schema.jsonify(new_vehicule)

@app.route('/vehicules/<immatriculation>', methods=['GET'])
@jwt_required()
def get_vehicule(immatriculation):
    vehicule = Vehicule.query.filter_by(immatriculation=immatriculation).first()
    if not vehicule:
        return jsonify({'message': 'Vehicule not found'}), 404
    return vehicule_schema.jsonify(vehicule)

if __name__ == '__main__':
    app.run(debug=True)
